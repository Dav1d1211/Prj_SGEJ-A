package application.controllers.cliente;

import application.controllers.casos_documentacion.ModuloCasosController;

import application.model.Cliente;
import application.service.ClienteService;
import application.controllers.administracion_sistema.FormUsuarioModalLauncher;
import application.utils.ExportadorExcel;
import javafx.beans.property.SimpleStringProperty;
import javafx.scene.control.Alert;
import java.util.List;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class ModuloClienteController {

    @FXML
    private Button btn_Nuevo;
    @FXML
    private Button btn_Buscar;
    @FXML
    private Button btn_LimpiarFiltro;
    @FXML
    private Button btn_ExportarExcel;
    @FXML
    private TextField txt_Busqueda;
    @FXML
    private Label lbl_TotalClientes;

    // Filtro de estado (solo para administradores)
    @FXML
    private VBox vbox_FiltroEstado;
    @FXML
    private ComboBox<String> cmb_FiltroEstado;

    @FXML
    private TableView<Cliente> tb_Clientes;
    @FXML
    private TableColumn<Cliente, String> tbc_Nombres;
    @FXML
    private TableColumn<Cliente, String> tbc_NumeroI;
    @FXML
    private TableColumn<Cliente, String> tbc_TipoIdentificacion;
    @FXML
    private TableColumn<Cliente, String> tbc_Telefono;
    @FXML
    private TableColumn<Cliente, String> tbc_Correo;
    @FXML
    private TableColumn<Cliente, String> tbc_Estado;

    @FXML
    private TableColumn<Cliente, Void> tbc_BotonEditar;
    @FXML
    private TableColumn<Cliente, Void> tbc_BotonVer;
    @FXML
    private TableColumn<Cliente, Void> tbc_BotonVerCasos;

    private Pane pnl_Forms;
    private ClienteService clienteService;
    private String tipoUsuario; // Para saber si es administrador

    // Flag para evitar m√∫ltiples ejecuciones
    private boolean formularioAbierto = false;

    // Variables para paginaci√≥n
    private int paginaActual = 1;
    private int registrosPorPagina = 10;
    private int totalRegistros = 0;
    private int totalPaginas = 0;
    private ObservableList<Cliente> todosLosClientes = FXCollections.observableArrayList();

    // Elementos de paginaci√≥n del FXML
    @FXML
    private Label lbl_InfoPaginacion;
    @FXML
    private Label lbl_TotalPaginas;
    @FXML
    private TextField txt_PaginaActual;
    @FXML
    private Button btn_PrimeraPagina;
    @FXML
    private Button btn_PaginaAnterior;
    @FXML
    private Button btn_PaginaSiguiente;
    @FXML
    private Button btn_UltimaPagina;
    @FXML
    private ComboBox<Integer> cmb_RegistrosPorPagina;

    /**
     * Inicializa el controlador despu√©s de que se haya cargado la vista
     */
    @FXML
    private void initialize() {
        clienteService = new ClienteService();

        btn_Nuevo.setOnAction(_ -> mostrarFormulario(null, "NUEVO"));
        btn_Buscar.setOnAction(_ -> buscarClientes());
        btn_LimpiarFiltro.setOnAction(_ -> limpiarFiltro());
        btn_ExportarExcel.setOnAction(_ -> exportarClientesAExcel());

        // Configurar ComboBox de filtro
        configurarFiltroEstado();

        configurarColumnasTexto();
        inicializarColumnasDeBotones();
        cargarClientesDesdeBaseDatos();
        ocultarEncabezadosColumnasDeAccion();
        actualizarContadorClientes();

        tbc_BotonEditar.getStyleClass().add("column-action");
        tbc_BotonVer.getStyleClass().add("column-action");
        tbc_BotonVerCasos.getStyleClass().add("column-action");

        // Configurar paginaci√≥n
        configurarPaginacion();

        // Evento doble clic en fila para abrir casos del cliente
        tb_Clientes.setRowFactory(tv -> {
            TableRow<Cliente> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && !row.isEmpty()) {
                    Cliente cliente = row.getItem();
                    abrirVistaCasosDeCliente(cliente);
                }
            });
            return row;
        });
    }

    private void ocultarEncabezadosColumnasDeAccion() {
        tb_Clientes.widthProperty().addListener((_, _, _) -> {
            double anchoOcupadoPorColumnasVisibles = tbc_Nombres.getWidth() + tbc_NumeroI.getWidth()
                    + tbc_TipoIdentificacion.getWidth() + tbc_Telefono.getWidth() + tbc_Correo.getWidth()
                    + tbc_Estado.getWidth();
            double anchoDispobibleParaColumnaDeAccion = tb_Clientes.getWidth() - anchoOcupadoPorColumnasVisibles;
            // Ahora tenemos 3 columnas de acci√≥n en lugar de 2
            double anchoParaCadaColumnaDeAccion = anchoDispobibleParaColumnaDeAccion / 3;
            tbc_BotonEditar.setPrefWidth(anchoParaCadaColumnaDeAccion);
            tbc_BotonVer.setPrefWidth(anchoParaCadaColumnaDeAccion);
            tbc_BotonVerCasos.setPrefWidth(anchoParaCadaColumnaDeAccion);
        });
    }

    private void configurarColumnasTexto() {
        tbc_Nombres.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getNombreCompleto()));
        tbc_NumeroI.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getNumeroIdentificacion()));
        tbc_TipoIdentificacion
                .setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTipoIdentificacion().name()));
        tbc_Telefono.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTelefono()));
        tbc_Correo.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getCorreoElectronico()));
        tbc_Estado.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getEstado().name()));
    }

    private void inicializarColumnasDeBotones() {
        // Configurar los botones en el orden: Editar, Ver, Ver Casos
        agregarBotonPorColumna(tbc_BotonEditar, "‚úèÔ∏è", "Editar");
        agregarBotonPorColumna(tbc_BotonVer, "üëÅÔ∏è", "Ver");
        agregarBotonPorColumna(tbc_BotonVerCasos, "üìÅ", "Ver Casos");

        // Eliminar encabezados de las columnas de acciones
        tbc_BotonEditar.setText("");
        tbc_BotonVer.setText("");
        tbc_BotonVerCasos.setText("");

        // Configurar ancho de columnas
        tbc_BotonEditar.setPrefWidth(50);
        tbc_BotonVer.setPrefWidth(50);
        tbc_BotonVerCasos.setPrefWidth(50);
    }

    private void agregarBotonPorColumna(TableColumn<Cliente, Void> columna, String texto, String tooltip) {
        columna.getStyleClass().add("column-action");
        columna.setCellFactory(_ -> new TableCell<Cliente, Void>() {
            private final Button btn = new Button(texto);
            {
                btn.getStyleClass().add("table-button");
                setStyle("-fx-alignment: CENTER; -fx-padding: 2;");
                btn.setTooltip(new Tooltip(tooltip));
                
                // Configurar estilo seg√∫n el tipo de bot√≥n
                if ("Editar".equals(tooltip)) {
                    btn.setStyle("-fx-background-color: #f59e0b; -fx-text-fill: white; -fx-background-radius: 4; " +
                            "-fx-font-size: 11px; -fx-font-weight: bold; -fx-min-width: 65; -fx-max-width: 65; " +
                            "-fx-min-height: 30; -fx-max-height: 30; -fx-cursor: hand; -fx-padding: 0;");
                } else if ("Ver".equals(tooltip)) {
                    btn.setStyle("-fx-background-color: #3b82f6; -fx-text-fill: white; -fx-background-radius: 4; " +
                            "-fx-font-size: 11px; -fx-font-weight: bold; -fx-min-width: 65; -fx-max-width: 65; " +
                            "-fx-min-height: 30; -fx-max-height: 30; -fx-cursor: hand; -fx-padding: 0;");
                } else if ("Ver Casos".equals(tooltip)) {
                    btn.setStyle("-fx-background-color: #10b981; -fx-text-fill: white; -fx-background-radius: 4; " +
                            "-fx-font-size: 11px; -fx-font-weight: bold; -fx-min-width: 65; -fx-max-width: 65; " +
                            "-fx-min-height: 30; -fx-max-height: 30; -fx-cursor: hand; -fx-padding: 0;");
                }
                
                // Efectos de hover
                btn.setOnMouseEntered(_ -> {
                    if ("Editar".equals(tooltip)) {
                        btn.setStyle(btn.getStyle() + "-fx-background-color: #d97706;");
                    } else if ("Ver".equals(tooltip)) {
                        btn.setStyle(btn.getStyle() + "-fx-background-color: #2563eb;");
                    } else if ("Ver Casos".equals(tooltip)) {
                        btn.setStyle(btn.getStyle() + "-fx-background-color: #059669;");
                    }
                });
                
                btn.setOnMouseExited(_ -> {
                    if ("Editar".equals(tooltip)) {
                        btn.setStyle("-fx-background-color: #f59e0b; -fx-text-fill: white; -fx-background-radius: 4; " +
                                "-fx-font-size: 11px; -fx-font-weight: bold; -fx-min-width: 65; -fx-max-width: 65; " +
                                "-fx-min-height: 30; -fx-max-height: 30; -fx-cursor: hand; -fx-padding: 0;");
                    } else if ("Ver".equals(tooltip)) {
                        btn.setStyle("-fx-background-color: #3b82f6; -fx-text-fill: white; -fx-background-radius: 4; " +
                                "-fx-font-size: 11px; -fx-font-weight: bold; -fx-min-width: 65; -fx-max-width: 65; " +
                                "-fx-min-height: 30; -fx-max-height: 30; -fx-cursor: hand; -fx-padding: 0;");
                    } else if ("Ver Casos".equals(tooltip)) {
                        btn.setStyle("-fx-background-color: #10b981; -fx-text-fill: white; -fx-background-radius: 4; " +
                                "-fx-font-size: 11px; -fx-font-weight: bold; -fx-min-width: 65; -fx-max-width: 65; " +
                                "-fx-min-height: 30; -fx-max-height: 30; -fx-cursor: hand; -fx-padding: 0;");
                    }
                });
                
                // Configurar acci√≥n del bot√≥n seg√∫n su tipo
                btn.setOnAction(_ -> {
                    Cliente cliente = getTableView().getItems().get(getIndex());
                    if ("Editar".equals(tooltip)) {
                        mostrarFormulario(cliente, "EDITAR");
                    } else if ("Ver".equals(tooltip)) {
                        mostrarDetallesCliente(cliente);
                    } else if ("Ver Casos".equals(tooltip)) {
                        abrirVistaCasosDeCliente(cliente);
                    }
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                setGraphic(empty ? null : btn);
            }
        });
    }

    /**
     * Muestra los detalles del cliente en modo solo lectura
     */
    private void mostrarDetallesCliente(Cliente cliente) {
        if (cliente == null) return;
        
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/cliente/form_cliente.fxml"));
            Parent root = loader.load();
            
            FormClienteController controller = loader.getController();
            controller.inicializarParaVerDetalle(cliente); // Este m√©todo debe implementarse en FormClienteController
            
            Stage stage = new Stage();
            stage.setTitle("Detalles del Cliente: " + cliente.getNombreCompleto());
            stage.setScene(new Scene(root));
            stage.initModality(Modality.APPLICATION_MODAL);
            stage.showAndWait();
            
        } catch (IOException e) {
            mostrarAlerta("Error", "No se pudieron cargar los detalles del cliente. Error: " + e.getMessage(), Alert.AlertType.ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Abre la vista de casos filtrada por el cliente seleccionado.
     */
    private void abrirVistaCasosDeCliente(Cliente cliente) {
        // Usar el singleton MainController para cargar el m√≥dulo de casos y pasar el
        // cliente
        try {
            if (cliente != null) {
                System.out.println("DEBUG: Cliente seleccionado: " + cliente.getNombreCompleto() + " ("
                        + cliente.getNumeroIdentificacion() + ")");
            } else {
                System.out.println("DEBUG: No hay cliente seleccionado (cliente es null)");
            }
            application.controllers.MainController mainController = application.controllers.MainController
                    .getInstance();
            if (mainController != null) {
                mainController.cargarModulo("/views/casos_documentos/modulo_casos_documentacion_casos.fxml");
                // Obtener el AnchorPane de m√≥dulos
                AnchorPane anchorPane = mainController.getAnchorPaneModulos();
                // Buscar el controlador de casos para filtrar por cliente
                if (anchorPane != null && anchorPane.getChildren().size() > 0) {
                    Node node = anchorPane.getChildren().get(0);
                    Object controller = node.getProperties().get("controller");
                    if (controller instanceof ModuloCasosController) {
                        ModuloCasosController moduloCasosController = (ModuloCasosController) controller;
                        moduloCasosController.filtrarPorCliente(cliente);
                    }
                }
            }
        } catch (Exception e) {
            mostrarAlerta("Error", "No se pudo abrir la vista de casos. Error: " + e.getMessage(), Alert.AlertType.ERROR);
            e.printStackTrace();
        }
    }

    /**
     * Carga clientes desde la base de datos seg√∫n filtros (para regular y
     * administradores)
     */
    private void cargarClientesDesdeBaseDatos() {
        try {
            // Cargar todos los clientes seg√∫n filtros
            if ("Administrador".equals(tipoUsuario) && cmb_FiltroEstado != null && cmb_FiltroEstado.isVisible()) {
                String filtroEstado = cmb_FiltroEstado.getSelectionModel().getSelectedItem();

                if ("Todos".equals(filtroEstado)) {
                    todosLosClientes = clienteService.obtenerTodosLosClientesIncluirInactivos();
                } else if ("Inactivos".equals(filtroEstado)) {
                    todosLosClientes = clienteService.obtenerClientesPorEstado(Cliente.Estado.INACTIVO);
                } else {
                    todosLosClientes = clienteService.obtenerClientesActivos();
                }
            } else {
                todosLosClientes = clienteService.obtenerClientesActivos();
            }

            totalRegistros = todosLosClientes.size();
            calcularTotalPaginas();
            mostrarPaginaActual();
            actualizarInfoPaginacion();
            actualizarEstadoBotones();
        } catch (Exception e) {
            mostrarAlerta("Error de Base de Datos", 
                        "No se pudieron cargar los clientes desde la base de datos. Error: " + e.getMessage(), 
                        Alert.AlertType.ERROR);
            e.printStackTrace();
        }
    }

    private void mostrarAlerta(String titulo, String mensaje, Alert.AlertType tipo) {
        Alert alert = new Alert(tipo);
        alert.setTitle(titulo);
        alert.setHeaderText(null);
        alert.setContentText(mensaje);
        alert.showAndWait();
    }

    /**
     * Actualiza el contador de clientes en la interfaz
     */
    private void actualizarContadorClientes() {
        if (todosLosClientes != null && lbl_TotalClientes != null) {
            lbl_TotalClientes.setText("Total: " + todosLosClientes.size() + " clientes");
        }
    }

    /**
     * Calcula el total de p√°ginas seg√∫n el n√∫mero de registros y registros por p√°gina
     */
    private void calcularTotalPaginas() {
        if (registrosPorPagina > 0) {
            totalPaginas = (int) Math.ceil((double) totalRegistros / registrosPorPagina);
        } else {
            totalPaginas = 1;
        }
    }

    /**
     * Actualizar informaci√≥n de paginaci√≥n
     */
    private void actualizarInfoPaginacion() {
        int inicio = totalRegistros > 0 ? (paginaActual - 1) * registrosPorPagina + 1 : 0;
        int fin = Math.min(paginaActual * registrosPorPagina, totalRegistros);

        if (lbl_InfoPaginacion != null) {
            lbl_InfoPaginacion.setText(inicio + "-" + fin + " de " + totalRegistros);
        }

        if (lbl_TotalPaginas != null) {
            lbl_TotalPaginas.setText(String.valueOf(totalPaginas));
        }

        if (txt_PaginaActual != null) {
            txt_PaginaActual.setText(String.valueOf(paginaActual));
        }
    }

    /**
     * Actualizar estado de botones de navegaci√≥n
     */
    private void actualizarEstadoBotones() {
        if (btn_PrimeraPagina != null) {
            btn_PrimeraPagina.setDisable(paginaActual <= 1);
        }
        if (btn_PaginaAnterior != null) {
            btn_PaginaAnterior.setDisable(paginaActual <= 1);
        }
        if (btn_PaginaSiguiente != null) {
            btn_PaginaSiguiente.setDisable(paginaActual >= totalPaginas);
        }
        if (btn_UltimaPagina != null) {
            btn_UltimaPagina.setDisable(paginaActual >= totalPaginas);
        }
    }

    // El resto del c√≥digo se mantiene sin cambios...
}
